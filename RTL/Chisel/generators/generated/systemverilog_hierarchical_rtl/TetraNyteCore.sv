// Generated by CIRCT firtool-1.105.0
module RegFileMT2R1WVec(	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
  input         clock,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
                reset,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
  input  [1:0]  io_threadID,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
  input  [4:0]  io_src1,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
                io_src2,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
                io_dst1,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
  input         io_wen,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
  input  [31:0] io_dst1data,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
  output [31:0] io_src1data,	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
                io_src2data	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:38:14
);

  wire [127:0][31:0] _regs_WIRE =
    '{32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0};	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:51:29
  wire
    struct packed {logic [1:0] threadID; logic [4:0] src1; logic [4:0] src2; logic [4:0] dst1; logic wen; logic [31:0] dst1data; logic [31:0] src1data; logic [31:0] src2data; }
    io;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
  reg  [127:0][31:0] regs;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:51:21
  wire [6:0]         effectiveSrc1 = {io.threadID, io.src1};	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7, :54:26
  wire [6:0]         effectiveSrc2 = {io.threadID, io.src2};	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7, :55:26
  wire [6:0]         effectiveDst1 = {io.threadID, io.dst1};	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7, :56:26
  assign io =
    '{threadID: io_threadID,
      src1: io_src1,
      src2: io_src2,
      dst1: io_dst1,
      wen: io_wen,
      dst1data: io_dst1data,
      src1data: regs[effectiveSrc1],
      src2data: regs[effectiveSrc2]};	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7, :51:21, :54:26, :55:26, :64:15, :65:15
  always @(posedge clock) begin	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
    if (reset)	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
      regs <= _regs_WIRE;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:51:{21,29}
    else if (io.wen)	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
      regs[effectiveDst1] <= io.dst1data;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7, :51:21, :56:26
  end // always @(posedge)
  assign io_src1data = io.src1data;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
  assign io_src2data = io.src2data;	// src/main/scala/TetraNyteCore/RegFileMT2R1WVec.scala:28:7
endmodule

module TetraNyteCore_Anon(	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24
  input  [31:0] io_a,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:66:16
                io_b,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:66:16
  input  [4:0]  io_fn,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:66:16
  output [31:0] io_out	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:66:16
);

  wire struct packed {logic [31:0] a; logic [31:0] b; logic [4:0] fn; logic [31:0] out; }
    io;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24
  wire [32:0] _GEN = {1'h0, io.a};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24, :70:26
  wire [32:0] _GEN_0 = {1'h0, io.b};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24, :70:26
  wire [32:0] _io_out_T = _GEN + _GEN_0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:70:26
  wire [31:0] _io_out_T_1 = _io_out_T[31:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:70:26
  wire [32:0] _io_out_T_2 = _GEN - _GEN_0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:70:26, :71:26
  wire [31:0] _io_out_T_3 = _io_out_T_2[31:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:71:26
  assign io =
    '{a: io_a,
      b: io_b,
      fn: io_fn,
      out: (io.fn == 5'h0 ? _io_out_T_1 : io.fn == 5'h1 ? _io_out_T_3 : 32'h0)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24, :68:9, :69:16, :70:{21,26}, :71:{21,26}
  assign io_out = io.out;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:24
endmodule

// VCS coverage exclude_file
module instrMem_1024x32(	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:1023];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  reg        _R0_en_d0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  reg [9:0]  _R0_addr_d0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  always @(posedge R0_clk) begin	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
    _R0_en_d0 <= R0_en;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
    _R0_addr_d0 <= R0_addr;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
    if (W0_en & 1'h1)	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
      Memory[W0_addr] <= W0_data;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
endmodule

module TetraNyteCore(	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  input         clock,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
                reset,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  output [31:0] io_memAddr,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
                io_memWdata,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  input  [31:0] io_memRdata,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  output        io_memWe,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  input         io_instrWriteEnable,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  input  [9:0]  io_instrWriteAddr,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  input  [31:0] io_instrWriteData,	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
  input         io_debug	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:22:14
);

  wire [31:0]      _alu_io_out;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:19
  wire [31:0]      _regFile_io_src1data;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:56:23
  wire [31:0]      _regFile_io_src2data;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:56:23
  wire [31:0]      _instrMem_ext_R0_data;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  wire [3:0][31:0] _pcRegs_WIRE = '{32'h0, 32'h0, 32'h0, 32'h0};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:47:31
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _GEN =
    '{threadId: 2'h0,
      valid: 1'h0,
      pc: 32'h0,
      instr: 32'h0,
      isALU: 1'h0,
      isLoad: 1'h0,
      isStore: 1'h0,
      isBranch: 1'h0,
      isJAL: 1'h0,
      isJALR: 1'h0,
      isLUI: 1'h0,
      isAUIPC: 1'h0,
      isFence: 1'h0,
      isSystem: 1'h0,
      aluOp: 5'h0,
      imm: 32'h0,
      rs1: 5'h0,
      rs2: 5'h0,
      rd: 5'h0,
      rs1Data: 32'h0,
      rs2Data: 32'h0,
      memAddr: 32'h0,
      memWdata: 32'h0,
      memRdata: 32'h0,
      aluResult: 32'h0};
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _ifStage_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  assign _ifStage_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _ifStage_WIRE_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  assign _ifStage_WIRE_1 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _ifStage_WIRE_2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  assign _ifStage_WIRE_2 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _ifStage_WIRE_3;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  assign _ifStage_WIRE_3 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _decStage_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  assign _decStage_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _decStage_WIRE_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  assign _decStage_WIRE_1 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _decStage_WIRE_2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  assign _decStage_WIRE_2 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _decStage_WIRE_3;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  assign _decStage_WIRE_3 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _exStage_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  assign _exStage_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _exStage_WIRE_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  assign _exStage_WIRE_1 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _exStage_WIRE_2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  assign _exStage_WIRE_2 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _exStage_WIRE_3;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  assign _exStage_WIRE_3 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _memStage_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  assign _memStage_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _memStage_WIRE_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  assign _memStage_WIRE_1 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _memStage_WIRE_2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  assign _memStage_WIRE_2 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _memStage_WIRE_3;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  assign _memStage_WIRE_3 = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:67
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _ifWire_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:91:37
  assign _ifWire_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:91:37
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _decWire_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:38
  assign _decWire_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:38
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _exWire_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:37
  assign _exWire_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:37
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _memWire_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:38
  assign _memWire_WIRE = _GEN;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:38
  wire
    struct packed {logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic memWe; logic instrWriteEnable; logic [9:0] instrWriteAddr; logic [31:0] instrWriteData; logic debug; }
    io;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  reg  [1:0]       currentThread;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30
  wire [2:0]       _currentThread_T = {1'h0, currentThread} + 3'h1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :44:34, :91:24, :102:26
  wire [1:0]       _currentThread_T_1 = _currentThread_T[1:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:44:34
  reg  [3:0][31:0] pcRegs;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:47:23
  struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    ifStage;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:25
  struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    decStage;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:25
  struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    exStage;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:25
  struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    memStage;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:25
  wire [31:0]      _GEN_0 = pcRegs[currentThread];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :47:23, :94:19
  wire [29:0]      _ifWire_instr_T = _GEN_0[31:2];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:94:19, :95:58
  wire [29:0]      _ifWire_instr_WIRE = _ifWire_instr_T;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:95:{35,58}
  wire [9:0]       _ifWire_instr_T_1 = _ifWire_instr_WIRE[9:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:95:35
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    ifWire =
    '{threadId: currentThread,
      valid: (1'h1),
      pc: _GEN_0,
      instr: _instrMem_ext_R0_data,
      isALU: (1'h0),
      isLoad: (1'h0),
      isStore: (1'h0),
      isBranch: (1'h0),
      isJAL: (1'h0),
      isJALR: (1'h0),
      isLUI: (1'h0),
      isAUIPC: (1'h0),
      isFence: (1'h0),
      isSystem: (1'h0),
      aluOp: (5'h0),
      imm: (32'h0),
      rs1: (5'h0),
      rs2: (5'h0),
      rd: (5'h0),
      rs1Data: (32'h0),
      rs2Data: (32'h0),
      memAddr: (32'h0),
      memWdata: (32'h0),
      memRdata: (32'h0),
      aluResult: (32'h0)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7, :43:30, :50:29, :91:24, :92:19, :93:19, :94:19, :95:19, :102:26
  wire [32:0]      _pcRegs_T = {1'h0, _GEN_0} + 33'h4;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:91:24, :94:19, :99:50, :102:26
  wire [31:0]      _pcRegs_T_1 = _pcRegs_T[31:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:99:50
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _GEN_1 = decStage[currentThread];	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :83:25
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    decWire;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25
  wire [6:0]       opcode = decWire.instr[6:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :114:29
  wire             _T = opcode == 7'h33;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:114:29, :115:15
  wire             _T_1 = opcode == 7'h3;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:114:29, :117:22
  wire [4:0]       _decWire_rs1_T = decWire.instr[19:15];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :114:29, :123:31
  wire [4:0]       _decWire_rs2_T = decWire.instr[24:20];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :114:29, :124:31
  wire [4:0]       _decWire_rd_T = decWire.instr[11:7];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :114:29, :125:31
  assign decWire =
    '{threadId: _GEN_1.threadId,
      valid: _GEN_1.valid,
      pc: _GEN_1.pc,
      instr: _GEN_1.instr,
      isALU: (_T | _GEN_1.isALU),
      isLoad: (~_T & _T_1 | _GEN_1.isLoad),
      isStore: (~(_T | _T_1) & opcode == 7'h23 | _GEN_1.isStore),
      isBranch: _GEN_1.isBranch,
      isJAL: _GEN_1.isJAL,
      isJALR: _GEN_1.isJALR,
      isLUI: _GEN_1.isLUI,
      isAUIPC: _GEN_1.isAUIPC,
      isFence: _GEN_1.isFence,
      isSystem: _GEN_1.isSystem,
      aluOp: _GEN_1.aluOp,
      imm: _GEN_1.imm,
      rs1: _decWire_rs1_T,
      rs2: _decWire_rs2_T,
      rd: _decWire_rd_T,
      rs1Data: _regFile_io_src1data,
      rs2Data: _regFile_io_src2data,
      memAddr: _GEN_1.memAddr,
      memWdata: _GEN_1.memWdata,
      memRdata: _GEN_1.memRdata,
      aluResult: _GEN_1.aluResult};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:56:23, :110:25, :111:11, :114:29, :115:{15,33}, :116:19, :117:{22,40}, :119:{22,40}, :123:{15,31}, :124:{15,31}, :125:{15,31}, :135:19, :136:19
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _GEN_2 = exStage[currentThread];	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :84:25
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    exWire;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:24
  wire             _T_3 = exWire.isLoad | exWire.isStore;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:24, :158:22
  wire [32:0]      _exWire_memAddr_T = {1'h0, exWire.rs1Data} + {1'h0, exWire.imm};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:91:24, :102:26, :147:24, :151:13, :159:39
  wire [31:0]      _exWire_memAddr_T_1 = _exWire_memAddr_T[31:0];	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:159:39
  assign exWire =
    '{threadId: _GEN_2.threadId,
      valid: _GEN_2.valid,
      pc: _GEN_2.pc,
      instr: _GEN_2.instr,
      isALU: _GEN_2.isALU,
      isLoad: _GEN_2.isLoad,
      isStore: _GEN_2.isStore,
      isBranch: _GEN_2.isBranch,
      isJAL: _GEN_2.isJAL,
      isJALR: _GEN_2.isJALR,
      isLUI: _GEN_2.isLUI,
      isAUIPC: _GEN_2.isAUIPC,
      isFence: _GEN_2.isFence,
      isSystem: _GEN_2.isSystem,
      aluOp: _GEN_2.aluOp,
      imm: _GEN_2.imm,
      rs1: _GEN_2.rs1,
      rs2: _GEN_2.rs2,
      rd: _GEN_2.rd,
      rs1Data: _GEN_2.rs1Data,
      rs2Data: _GEN_2.rs2Data,
      memAddr: (_T_3 ? _exWire_memAddr_T_1 : _GEN_2.memAddr),
      memWdata: (_T_3 ? exWire.rs2Data : _GEN_2.memWdata),
      memRdata: _GEN_2.memRdata,
      aluResult: _alu_io_out};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:19, :147:24, :148:10, :152:13, :155:20, :158:{22,41}, :159:{21,39}, :160:21
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    _GEN_3 = memStage[currentThread];	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :85:25
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }
    memWire;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25
  wire             _io_memWe_T = memWire.isStore & memWire.valid;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :178:34
  assign memWire =
    '{threadId: _GEN_3.threadId,
      valid: _GEN_3.valid,
      pc: _GEN_3.pc,
      instr: _GEN_3.instr,
      isALU: _GEN_3.isALU,
      isLoad: _GEN_3.isLoad,
      isStore: _GEN_3.isStore,
      isBranch: _GEN_3.isBranch,
      isJAL: _GEN_3.isJAL,
      isJALR: _GEN_3.isJALR,
      isLUI: _GEN_3.isLUI,
      isAUIPC: _GEN_3.isAUIPC,
      isFence: _GEN_3.isFence,
      isSystem: _GEN_3.isSystem,
      aluOp: _GEN_3.aluOp,
      imm: _GEN_3.imm,
      rs1: _GEN_3.rs1,
      rs2: _GEN_3.rs2,
      rd: _GEN_3.rd,
      rs1Data: _GEN_3.rs1Data,
      rs2Data: _GEN_3.rs2Data,
      memAddr: _GEN_3.memAddr,
      memWdata: _GEN_3.memWdata,
      memRdata: io.memRdata,
      aluResult: _GEN_3.aluResult};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7, :172:25, :173:11, :181:20
  wire [31:0]      wbData = memWire.isLoad ? memWire.memRdata : memWire.aluResult;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :181:20, :184:19
  wire             _regFile_io_wen_T = |memWire.rd;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :185:23, :187:55
  wire             _regFile_io_wen_T_1 = memWire.valid & _regFile_io_wen_T;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :178:34, :187:{40,55}
  wire             _regFile_io_wen_T_2 = memWire.isLoad | memWire.isALU;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :184:19, :188:42
  wire             _regFile_io_wen_T_3 = _regFile_io_wen_T_1 & _regFile_io_wen_T_2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:187:{40,64}, :188:42
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    _ifStage_WIRE_4 =
    {{_ifStage_WIRE_3}, {_ifStage_WIRE_2}, {_ifStage_WIRE_1}, {_ifStage_WIRE}};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:{33,67}
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    _decStage_WIRE_4 =
    {{_decStage_WIRE_3}, {_decStage_WIRE_2}, {_decStage_WIRE_1}, {_decStage_WIRE}};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:{33,67}
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    _exStage_WIRE_4 =
    {{_exStage_WIRE_3}, {_exStage_WIRE_2}, {_exStage_WIRE_1}, {_exStage_WIRE}};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:{33,67}
  wire
    struct packed {logic [1:0] threadId; logic valid; logic [31:0] pc; logic [31:0] instr; logic isALU; logic isLoad; logic isStore; logic isBranch; logic isJAL; logic isJALR; logic isLUI; logic isAUIPC; logic isFence; logic isSystem; logic [4:0] aluOp; logic [31:0] imm; logic [4:0] rs1; logic [4:0] rs2; logic [4:0] rd; logic [31:0] rs1Data; logic [31:0] rs2Data; logic [31:0] memAddr; logic [31:0] memWdata; logic [31:0] memRdata; logic [31:0] aluResult; }[3:0]
    _memStage_WIRE_4 =
    {{_memStage_WIRE_3}, {_memStage_WIRE_2}, {_memStage_WIRE_1}, {_memStage_WIRE}};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:{33,67}
  assign io =
    '{memAddr: memWire.memAddr,
      memWdata: memWire.memWdata,
      memRdata: io_memRdata,
      memWe: _io_memWe_T,
      instrWriteEnable: io_instrWriteEnable,
      instrWriteAddr: io_instrWriteAddr,
      instrWriteData: io_instrWriteData,
      debug: io_debug};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7, :172:25, :176:15, :177:15, :178:34
  always @(posedge clock) begin	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
    if (reset) begin	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
      currentThread <= 2'h0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :102:26, :139:27, :164:26, :191:27
      pcRegs <= _pcRegs_WIRE;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:47:{23,31}
      ifStage <= _ifStage_WIRE_4;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:{25,33}
      decStage <= _decStage_WIRE_4;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:{25,33}
      exStage <= _exStage_WIRE_4;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:{25,33}
      memStage <= _memStage_WIRE_4;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:{25,33}
    end
    else begin	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
      automatic logic _GEN_4 = currentThread == 2'h0;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :99:25, :102:26, :139:27, :164:26, :191:27
      automatic logic _GEN_5 = currentThread == 2'h1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :99:25, :102:26, :139:27, :164:26, :191:27
      automatic logic _GEN_6 = currentThread == 2'h2;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :99:25, :102:26, :139:27, :164:26, :191:27
      currentThread <= _currentThread_T_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :44:34
      pcRegs[currentThread] <= _pcRegs_T_1;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :47:23, :99:50
      ifStage[2'h0] <=
        '{threadId: (_GEN_4 ? ifWire.threadId : ifStage[2'h0].threadId),
          valid: (_GEN_4 | ifStage[2'h0].valid),
          pc: (_GEN_4 ? ifWire.pc : ifStage[2'h0].pc),
          instr: (_GEN_4 ? ifWire.instr : ifStage[2'h0].instr),
          isALU: (~_GEN_4 & ifStage[2'h0].isALU),
          isLoad: (~_GEN_4 & ifStage[2'h0].isLoad),
          isStore: (~_GEN_4 & ifStage[2'h0].isStore),
          isBranch: (~_GEN_4 & ifStage[2'h0].isBranch),
          isJAL: (~_GEN_4 & ifStage[2'h0].isJAL),
          isJALR: (~_GEN_4 & ifStage[2'h0].isJALR),
          isLUI: (~_GEN_4 & ifStage[2'h0].isLUI),
          isAUIPC: (~_GEN_4 & ifStage[2'h0].isAUIPC),
          isFence: (~_GEN_4 & ifStage[2'h0].isFence),
          isSystem: (~_GEN_4 & ifStage[2'h0].isSystem),
          aluOp: (_GEN_4 ? 5'h0 : ifStage[2'h0].aluOp),
          imm: (_GEN_4 ? 32'h0 : ifStage[2'h0].imm),
          rs1: (_GEN_4 ? 5'h0 : ifStage[2'h0].rs1),
          rs2: (_GEN_4 ? 5'h0 : ifStage[2'h0].rs2),
          rd: (_GEN_4 ? 5'h0 : ifStage[2'h0].rd),
          rs1Data: (_GEN_4 ? 32'h0 : ifStage[2'h0].rs1Data),
          rs2Data: (_GEN_4 ? 32'h0 : ifStage[2'h0].rs2Data),
          memAddr: (_GEN_4 ? 32'h0 : ifStage[2'h0].memAddr),
          memWdata: (_GEN_4 ? 32'h0 : ifStage[2'h0].memWdata),
          memRdata: (_GEN_4 ? 32'h0 : ifStage[2'h0].memRdata),
          aluResult: (_GEN_4 ? 32'h0 : ifStage[2'h0].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:25, :91:24, :99:25, :102:26, :139:27, :164:26, :191:27
      ifStage[2'h1] <=
        '{threadId: (_GEN_5 ? ifWire.threadId : ifStage[2'h1].threadId),
          valid: (_GEN_5 | ifStage[2'h1].valid),
          pc: (_GEN_5 ? ifWire.pc : ifStage[2'h1].pc),
          instr: (_GEN_5 ? ifWire.instr : ifStage[2'h1].instr),
          isALU: (~_GEN_5 & ifStage[2'h1].isALU),
          isLoad: (~_GEN_5 & ifStage[2'h1].isLoad),
          isStore: (~_GEN_5 & ifStage[2'h1].isStore),
          isBranch: (~_GEN_5 & ifStage[2'h1].isBranch),
          isJAL: (~_GEN_5 & ifStage[2'h1].isJAL),
          isJALR: (~_GEN_5 & ifStage[2'h1].isJALR),
          isLUI: (~_GEN_5 & ifStage[2'h1].isLUI),
          isAUIPC: (~_GEN_5 & ifStage[2'h1].isAUIPC),
          isFence: (~_GEN_5 & ifStage[2'h1].isFence),
          isSystem: (~_GEN_5 & ifStage[2'h1].isSystem),
          aluOp: (_GEN_5 ? 5'h0 : ifStage[2'h1].aluOp),
          imm: (_GEN_5 ? 32'h0 : ifStage[2'h1].imm),
          rs1: (_GEN_5 ? 5'h0 : ifStage[2'h1].rs1),
          rs2: (_GEN_5 ? 5'h0 : ifStage[2'h1].rs2),
          rd: (_GEN_5 ? 5'h0 : ifStage[2'h1].rd),
          rs1Data: (_GEN_5 ? 32'h0 : ifStage[2'h1].rs1Data),
          rs2Data: (_GEN_5 ? 32'h0 : ifStage[2'h1].rs2Data),
          memAddr: (_GEN_5 ? 32'h0 : ifStage[2'h1].memAddr),
          memWdata: (_GEN_5 ? 32'h0 : ifStage[2'h1].memWdata),
          memRdata: (_GEN_5 ? 32'h0 : ifStage[2'h1].memRdata),
          aluResult: (_GEN_5 ? 32'h0 : ifStage[2'h1].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:25, :91:24, :99:25, :102:26, :139:27, :164:26, :191:27
      ifStage[2'h2] <=
        '{threadId: (_GEN_6 ? ifWire.threadId : ifStage[2'h2].threadId),
          valid: (_GEN_6 | ifStage[2'h2].valid),
          pc: (_GEN_6 ? ifWire.pc : ifStage[2'h2].pc),
          instr: (_GEN_6 ? ifWire.instr : ifStage[2'h2].instr),
          isALU: (~_GEN_6 & ifStage[2'h2].isALU),
          isLoad: (~_GEN_6 & ifStage[2'h2].isLoad),
          isStore: (~_GEN_6 & ifStage[2'h2].isStore),
          isBranch: (~_GEN_6 & ifStage[2'h2].isBranch),
          isJAL: (~_GEN_6 & ifStage[2'h2].isJAL),
          isJALR: (~_GEN_6 & ifStage[2'h2].isJALR),
          isLUI: (~_GEN_6 & ifStage[2'h2].isLUI),
          isAUIPC: (~_GEN_6 & ifStage[2'h2].isAUIPC),
          isFence: (~_GEN_6 & ifStage[2'h2].isFence),
          isSystem: (~_GEN_6 & ifStage[2'h2].isSystem),
          aluOp: (_GEN_6 ? 5'h0 : ifStage[2'h2].aluOp),
          imm: (_GEN_6 ? 32'h0 : ifStage[2'h2].imm),
          rs1: (_GEN_6 ? 5'h0 : ifStage[2'h2].rs1),
          rs2: (_GEN_6 ? 5'h0 : ifStage[2'h2].rs2),
          rd: (_GEN_6 ? 5'h0 : ifStage[2'h2].rd),
          rs1Data: (_GEN_6 ? 32'h0 : ifStage[2'h2].rs1Data),
          rs2Data: (_GEN_6 ? 32'h0 : ifStage[2'h2].rs2Data),
          memAddr: (_GEN_6 ? 32'h0 : ifStage[2'h2].memAddr),
          memWdata: (_GEN_6 ? 32'h0 : ifStage[2'h2].memWdata),
          memRdata: (_GEN_6 ? 32'h0 : ifStage[2'h2].memRdata),
          aluResult: (_GEN_6 ? 32'h0 : ifStage[2'h2].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:82:25, :91:24, :99:25, :102:26, :139:27, :164:26, :191:27
      ifStage[2'h3] <=
        '{threadId: ((&currentThread) ? ifWire.threadId : ifStage[2'h3].threadId),
          valid: ((&currentThread) | ifStage[2'h3].valid),
          pc: ((&currentThread) ? ifWire.pc : ifStage[2'h3].pc),
          instr: ((&currentThread) ? ifWire.instr : ifStage[2'h3].instr),
          isALU: (~(&currentThread) & ifStage[2'h3].isALU),
          isLoad: (~(&currentThread) & ifStage[2'h3].isLoad),
          isStore: (~(&currentThread) & ifStage[2'h3].isStore),
          isBranch: (~(&currentThread) & ifStage[2'h3].isBranch),
          isJAL: (~(&currentThread) & ifStage[2'h3].isJAL),
          isJALR: (~(&currentThread) & ifStage[2'h3].isJALR),
          isLUI: (~(&currentThread) & ifStage[2'h3].isLUI),
          isAUIPC: (~(&currentThread) & ifStage[2'h3].isAUIPC),
          isFence: (~(&currentThread) & ifStage[2'h3].isFence),
          isSystem: (~(&currentThread) & ifStage[2'h3].isSystem),
          aluOp: ((&currentThread) ? 5'h0 : ifStage[2'h3].aluOp),
          imm: ((&currentThread) ? 32'h0 : ifStage[2'h3].imm),
          rs1: ((&currentThread) ? 5'h0 : ifStage[2'h3].rs1),
          rs2: ((&currentThread) ? 5'h0 : ifStage[2'h3].rs2),
          rd: ((&currentThread) ? 5'h0 : ifStage[2'h3].rd),
          rs1Data: ((&currentThread) ? 32'h0 : ifStage[2'h3].rs1Data),
          rs2Data: ((&currentThread) ? 32'h0 : ifStage[2'h3].rs2Data),
          memAddr: ((&currentThread) ? 32'h0 : ifStage[2'h3].memAddr),
          memWdata: ((&currentThread) ? 32'h0 : ifStage[2'h3].memWdata),
          memRdata: ((&currentThread) ? 32'h0 : ifStage[2'h3].memRdata),
          aluResult: ((&currentThread) ? 32'h0 : ifStage[2'h3].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :82:25, :91:24, :99:25, :102:26, :139:27, :164:26, :191:27
      decStage[2'h0] <=
        '{threadId: (_GEN_4 ? decWire.threadId : decStage[2'h0].threadId),
          valid: (_GEN_4 ? decWire.valid : decStage[2'h0].valid),
          pc: (_GEN_4 ? decWire.pc : decStage[2'h0].pc),
          instr: (_GEN_4 ? decWire.instr : decStage[2'h0].instr),
          isALU: (_GEN_4 ? decWire.isALU : decStage[2'h0].isALU),
          isLoad: (_GEN_4 ? decWire.isLoad : decStage[2'h0].isLoad),
          isStore: (_GEN_4 ? decWire.isStore : decStage[2'h0].isStore),
          isBranch: (_GEN_4 ? decWire.isBranch : decStage[2'h0].isBranch),
          isJAL: (_GEN_4 ? decWire.isJAL : decStage[2'h0].isJAL),
          isJALR: (_GEN_4 ? decWire.isJALR : decStage[2'h0].isJALR),
          isLUI: (_GEN_4 ? decWire.isLUI : decStage[2'h0].isLUI),
          isAUIPC: (_GEN_4 ? decWire.isAUIPC : decStage[2'h0].isAUIPC),
          isFence: (_GEN_4 ? decWire.isFence : decStage[2'h0].isFence),
          isSystem: (_GEN_4 ? decWire.isSystem : decStage[2'h0].isSystem),
          aluOp: (_GEN_4 ? decWire.aluOp : decStage[2'h0].aluOp),
          imm: (_GEN_4 ? decWire.imm : decStage[2'h0].imm),
          rs1: (_GEN_4 ? decWire.rs1 : decStage[2'h0].rs1),
          rs2: (_GEN_4 ? decWire.rs2 : decStage[2'h0].rs2),
          rd: (_GEN_4 ? decWire.rd : decStage[2'h0].rd),
          rs1Data: (_GEN_4 ? decWire.rs1Data : decStage[2'h0].rs1Data),
          rs2Data: (_GEN_4 ? decWire.rs2Data : decStage[2'h0].rs2Data),
          memAddr: (_GEN_4 ? decWire.memAddr : decStage[2'h0].memAddr),
          memWdata: (_GEN_4 ? decWire.memWdata : decStage[2'h0].memWdata),
          memRdata: (_GEN_4 ? decWire.memRdata : decStage[2'h0].memRdata),
          aluResult: (_GEN_4 ? decWire.aluResult : decStage[2'h0].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:25, :99:25, :102:26, :110:25, :114:29, :123:15, :124:15, :128:27, :139:27, :164:26, :191:27
      decStage[2'h1] <=
        '{threadId: (_GEN_5 ? decWire.threadId : decStage[2'h1].threadId),
          valid: (_GEN_5 ? decWire.valid : decStage[2'h1].valid),
          pc: (_GEN_5 ? decWire.pc : decStage[2'h1].pc),
          instr: (_GEN_5 ? decWire.instr : decStage[2'h1].instr),
          isALU: (_GEN_5 ? decWire.isALU : decStage[2'h1].isALU),
          isLoad: (_GEN_5 ? decWire.isLoad : decStage[2'h1].isLoad),
          isStore: (_GEN_5 ? decWire.isStore : decStage[2'h1].isStore),
          isBranch: (_GEN_5 ? decWire.isBranch : decStage[2'h1].isBranch),
          isJAL: (_GEN_5 ? decWire.isJAL : decStage[2'h1].isJAL),
          isJALR: (_GEN_5 ? decWire.isJALR : decStage[2'h1].isJALR),
          isLUI: (_GEN_5 ? decWire.isLUI : decStage[2'h1].isLUI),
          isAUIPC: (_GEN_5 ? decWire.isAUIPC : decStage[2'h1].isAUIPC),
          isFence: (_GEN_5 ? decWire.isFence : decStage[2'h1].isFence),
          isSystem: (_GEN_5 ? decWire.isSystem : decStage[2'h1].isSystem),
          aluOp: (_GEN_5 ? decWire.aluOp : decStage[2'h1].aluOp),
          imm: (_GEN_5 ? decWire.imm : decStage[2'h1].imm),
          rs1: (_GEN_5 ? decWire.rs1 : decStage[2'h1].rs1),
          rs2: (_GEN_5 ? decWire.rs2 : decStage[2'h1].rs2),
          rd: (_GEN_5 ? decWire.rd : decStage[2'h1].rd),
          rs1Data: (_GEN_5 ? decWire.rs1Data : decStage[2'h1].rs1Data),
          rs2Data: (_GEN_5 ? decWire.rs2Data : decStage[2'h1].rs2Data),
          memAddr: (_GEN_5 ? decWire.memAddr : decStage[2'h1].memAddr),
          memWdata: (_GEN_5 ? decWire.memWdata : decStage[2'h1].memWdata),
          memRdata: (_GEN_5 ? decWire.memRdata : decStage[2'h1].memRdata),
          aluResult: (_GEN_5 ? decWire.aluResult : decStage[2'h1].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:25, :99:25, :102:26, :110:25, :114:29, :123:15, :124:15, :128:27, :139:27, :164:26, :191:27
      decStage[2'h2] <=
        '{threadId: (_GEN_6 ? decWire.threadId : decStage[2'h2].threadId),
          valid: (_GEN_6 ? decWire.valid : decStage[2'h2].valid),
          pc: (_GEN_6 ? decWire.pc : decStage[2'h2].pc),
          instr: (_GEN_6 ? decWire.instr : decStage[2'h2].instr),
          isALU: (_GEN_6 ? decWire.isALU : decStage[2'h2].isALU),
          isLoad: (_GEN_6 ? decWire.isLoad : decStage[2'h2].isLoad),
          isStore: (_GEN_6 ? decWire.isStore : decStage[2'h2].isStore),
          isBranch: (_GEN_6 ? decWire.isBranch : decStage[2'h2].isBranch),
          isJAL: (_GEN_6 ? decWire.isJAL : decStage[2'h2].isJAL),
          isJALR: (_GEN_6 ? decWire.isJALR : decStage[2'h2].isJALR),
          isLUI: (_GEN_6 ? decWire.isLUI : decStage[2'h2].isLUI),
          isAUIPC: (_GEN_6 ? decWire.isAUIPC : decStage[2'h2].isAUIPC),
          isFence: (_GEN_6 ? decWire.isFence : decStage[2'h2].isFence),
          isSystem: (_GEN_6 ? decWire.isSystem : decStage[2'h2].isSystem),
          aluOp: (_GEN_6 ? decWire.aluOp : decStage[2'h2].aluOp),
          imm: (_GEN_6 ? decWire.imm : decStage[2'h2].imm),
          rs1: (_GEN_6 ? decWire.rs1 : decStage[2'h2].rs1),
          rs2: (_GEN_6 ? decWire.rs2 : decStage[2'h2].rs2),
          rd: (_GEN_6 ? decWire.rd : decStage[2'h2].rd),
          rs1Data: (_GEN_6 ? decWire.rs1Data : decStage[2'h2].rs1Data),
          rs2Data: (_GEN_6 ? decWire.rs2Data : decStage[2'h2].rs2Data),
          memAddr: (_GEN_6 ? decWire.memAddr : decStage[2'h2].memAddr),
          memWdata: (_GEN_6 ? decWire.memWdata : decStage[2'h2].memWdata),
          memRdata: (_GEN_6 ? decWire.memRdata : decStage[2'h2].memRdata),
          aluResult: (_GEN_6 ? decWire.aluResult : decStage[2'h2].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:83:25, :99:25, :102:26, :110:25, :114:29, :123:15, :124:15, :128:27, :139:27, :164:26, :191:27
      decStage[2'h3] <=
        '{threadId: ((&currentThread) ? decWire.threadId : decStage[2'h3].threadId),
          valid: ((&currentThread) ? decWire.valid : decStage[2'h3].valid),
          pc: ((&currentThread) ? decWire.pc : decStage[2'h3].pc),
          instr: ((&currentThread) ? decWire.instr : decStage[2'h3].instr),
          isALU: ((&currentThread) ? decWire.isALU : decStage[2'h3].isALU),
          isLoad: ((&currentThread) ? decWire.isLoad : decStage[2'h3].isLoad),
          isStore: ((&currentThread) ? decWire.isStore : decStage[2'h3].isStore),
          isBranch: ((&currentThread) ? decWire.isBranch : decStage[2'h3].isBranch),
          isJAL: ((&currentThread) ? decWire.isJAL : decStage[2'h3].isJAL),
          isJALR: ((&currentThread) ? decWire.isJALR : decStage[2'h3].isJALR),
          isLUI: ((&currentThread) ? decWire.isLUI : decStage[2'h3].isLUI),
          isAUIPC: ((&currentThread) ? decWire.isAUIPC : decStage[2'h3].isAUIPC),
          isFence: ((&currentThread) ? decWire.isFence : decStage[2'h3].isFence),
          isSystem: ((&currentThread) ? decWire.isSystem : decStage[2'h3].isSystem),
          aluOp: ((&currentThread) ? decWire.aluOp : decStage[2'h3].aluOp),
          imm: ((&currentThread) ? decWire.imm : decStage[2'h3].imm),
          rs1: ((&currentThread) ? decWire.rs1 : decStage[2'h3].rs1),
          rs2: ((&currentThread) ? decWire.rs2 : decStage[2'h3].rs2),
          rd: ((&currentThread) ? decWire.rd : decStage[2'h3].rd),
          rs1Data: ((&currentThread) ? decWire.rs1Data : decStage[2'h3].rs1Data),
          rs2Data: ((&currentThread) ? decWire.rs2Data : decStage[2'h3].rs2Data),
          memAddr: ((&currentThread) ? decWire.memAddr : decStage[2'h3].memAddr),
          memWdata: ((&currentThread) ? decWire.memWdata : decStage[2'h3].memWdata),
          memRdata: ((&currentThread) ? decWire.memRdata : decStage[2'h3].memRdata),
          aluResult: ((&currentThread) ? decWire.aluResult : decStage[2'h3].aluResult)};	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :83:25, :99:25, :102:26, :110:25, :114:29, :123:15, :124:15, :128:27, :139:27, :164:26, :191:27
      exStage[2'h0] <=
        '{threadId: (_GEN_4 ? exWire.threadId : exStage[2'h0].threadId),
          valid: (_GEN_4 ? exWire.valid : exStage[2'h0].valid),
          pc: (_GEN_4 ? exWire.pc : exStage[2'h0].pc),
          instr: (_GEN_4 ? exWire.instr : exStage[2'h0].instr),
          isALU: (_GEN_4 ? exWire.isALU : exStage[2'h0].isALU),
          isLoad: (_GEN_4 ? exWire.isLoad : exStage[2'h0].isLoad),
          isStore: (_GEN_4 ? exWire.isStore : exStage[2'h0].isStore),
          isBranch: (_GEN_4 ? exWire.isBranch : exStage[2'h0].isBranch),
          isJAL: (_GEN_4 ? exWire.isJAL : exStage[2'h0].isJAL),
          isJALR: (_GEN_4 ? exWire.isJALR : exStage[2'h0].isJALR),
          isLUI: (_GEN_4 ? exWire.isLUI : exStage[2'h0].isLUI),
          isAUIPC: (_GEN_4 ? exWire.isAUIPC : exStage[2'h0].isAUIPC),
          isFence: (_GEN_4 ? exWire.isFence : exStage[2'h0].isFence),
          isSystem: (_GEN_4 ? exWire.isSystem : exStage[2'h0].isSystem),
          aluOp: (_GEN_4 ? exWire.aluOp : exStage[2'h0].aluOp),
          imm: (_GEN_4 ? exWire.imm : exStage[2'h0].imm),
          rs1: (_GEN_4 ? exWire.rs1 : exStage[2'h0].rs1),
          rs2: (_GEN_4 ? exWire.rs2 : exStage[2'h0].rs2),
          rd: (_GEN_4 ? exWire.rd : exStage[2'h0].rd),
          rs1Data: (_GEN_4 ? exWire.rs1Data : exStage[2'h0].rs1Data),
          rs2Data: (_GEN_4 ? exWire.rs2Data : exStage[2'h0].rs2Data),
          memAddr: (_GEN_4 ? exWire.memAddr : exStage[2'h0].memAddr),
          memWdata: (_GEN_4 ? exWire.memWdata : exStage[2'h0].memWdata),
          memRdata: (_GEN_4 ? exWire.memRdata : exStage[2'h0].memRdata),
          aluResult: (_GEN_4 ? exWire.aluResult : exStage[2'h0].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:25, :99:25, :102:26, :139:27, :147:24, :151:13, :152:13, :153:13, :158:22, :159:39, :164:26, :191:27
      exStage[2'h1] <=
        '{threadId: (_GEN_5 ? exWire.threadId : exStage[2'h1].threadId),
          valid: (_GEN_5 ? exWire.valid : exStage[2'h1].valid),
          pc: (_GEN_5 ? exWire.pc : exStage[2'h1].pc),
          instr: (_GEN_5 ? exWire.instr : exStage[2'h1].instr),
          isALU: (_GEN_5 ? exWire.isALU : exStage[2'h1].isALU),
          isLoad: (_GEN_5 ? exWire.isLoad : exStage[2'h1].isLoad),
          isStore: (_GEN_5 ? exWire.isStore : exStage[2'h1].isStore),
          isBranch: (_GEN_5 ? exWire.isBranch : exStage[2'h1].isBranch),
          isJAL: (_GEN_5 ? exWire.isJAL : exStage[2'h1].isJAL),
          isJALR: (_GEN_5 ? exWire.isJALR : exStage[2'h1].isJALR),
          isLUI: (_GEN_5 ? exWire.isLUI : exStage[2'h1].isLUI),
          isAUIPC: (_GEN_5 ? exWire.isAUIPC : exStage[2'h1].isAUIPC),
          isFence: (_GEN_5 ? exWire.isFence : exStage[2'h1].isFence),
          isSystem: (_GEN_5 ? exWire.isSystem : exStage[2'h1].isSystem),
          aluOp: (_GEN_5 ? exWire.aluOp : exStage[2'h1].aluOp),
          imm: (_GEN_5 ? exWire.imm : exStage[2'h1].imm),
          rs1: (_GEN_5 ? exWire.rs1 : exStage[2'h1].rs1),
          rs2: (_GEN_5 ? exWire.rs2 : exStage[2'h1].rs2),
          rd: (_GEN_5 ? exWire.rd : exStage[2'h1].rd),
          rs1Data: (_GEN_5 ? exWire.rs1Data : exStage[2'h1].rs1Data),
          rs2Data: (_GEN_5 ? exWire.rs2Data : exStage[2'h1].rs2Data),
          memAddr: (_GEN_5 ? exWire.memAddr : exStage[2'h1].memAddr),
          memWdata: (_GEN_5 ? exWire.memWdata : exStage[2'h1].memWdata),
          memRdata: (_GEN_5 ? exWire.memRdata : exStage[2'h1].memRdata),
          aluResult: (_GEN_5 ? exWire.aluResult : exStage[2'h1].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:25, :99:25, :102:26, :139:27, :147:24, :151:13, :152:13, :153:13, :158:22, :159:39, :164:26, :191:27
      exStage[2'h2] <=
        '{threadId: (_GEN_6 ? exWire.threadId : exStage[2'h2].threadId),
          valid: (_GEN_6 ? exWire.valid : exStage[2'h2].valid),
          pc: (_GEN_6 ? exWire.pc : exStage[2'h2].pc),
          instr: (_GEN_6 ? exWire.instr : exStage[2'h2].instr),
          isALU: (_GEN_6 ? exWire.isALU : exStage[2'h2].isALU),
          isLoad: (_GEN_6 ? exWire.isLoad : exStage[2'h2].isLoad),
          isStore: (_GEN_6 ? exWire.isStore : exStage[2'h2].isStore),
          isBranch: (_GEN_6 ? exWire.isBranch : exStage[2'h2].isBranch),
          isJAL: (_GEN_6 ? exWire.isJAL : exStage[2'h2].isJAL),
          isJALR: (_GEN_6 ? exWire.isJALR : exStage[2'h2].isJALR),
          isLUI: (_GEN_6 ? exWire.isLUI : exStage[2'h2].isLUI),
          isAUIPC: (_GEN_6 ? exWire.isAUIPC : exStage[2'h2].isAUIPC),
          isFence: (_GEN_6 ? exWire.isFence : exStage[2'h2].isFence),
          isSystem: (_GEN_6 ? exWire.isSystem : exStage[2'h2].isSystem),
          aluOp: (_GEN_6 ? exWire.aluOp : exStage[2'h2].aluOp),
          imm: (_GEN_6 ? exWire.imm : exStage[2'h2].imm),
          rs1: (_GEN_6 ? exWire.rs1 : exStage[2'h2].rs1),
          rs2: (_GEN_6 ? exWire.rs2 : exStage[2'h2].rs2),
          rd: (_GEN_6 ? exWire.rd : exStage[2'h2].rd),
          rs1Data: (_GEN_6 ? exWire.rs1Data : exStage[2'h2].rs1Data),
          rs2Data: (_GEN_6 ? exWire.rs2Data : exStage[2'h2].rs2Data),
          memAddr: (_GEN_6 ? exWire.memAddr : exStage[2'h2].memAddr),
          memWdata: (_GEN_6 ? exWire.memWdata : exStage[2'h2].memWdata),
          memRdata: (_GEN_6 ? exWire.memRdata : exStage[2'h2].memRdata),
          aluResult: (_GEN_6 ? exWire.aluResult : exStage[2'h2].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:84:25, :99:25, :102:26, :139:27, :147:24, :151:13, :152:13, :153:13, :158:22, :159:39, :164:26, :191:27
      exStage[2'h3] <=
        '{threadId: ((&currentThread) ? exWire.threadId : exStage[2'h3].threadId),
          valid: ((&currentThread) ? exWire.valid : exStage[2'h3].valid),
          pc: ((&currentThread) ? exWire.pc : exStage[2'h3].pc),
          instr: ((&currentThread) ? exWire.instr : exStage[2'h3].instr),
          isALU: ((&currentThread) ? exWire.isALU : exStage[2'h3].isALU),
          isLoad: ((&currentThread) ? exWire.isLoad : exStage[2'h3].isLoad),
          isStore: ((&currentThread) ? exWire.isStore : exStage[2'h3].isStore),
          isBranch: ((&currentThread) ? exWire.isBranch : exStage[2'h3].isBranch),
          isJAL: ((&currentThread) ? exWire.isJAL : exStage[2'h3].isJAL),
          isJALR: ((&currentThread) ? exWire.isJALR : exStage[2'h3].isJALR),
          isLUI: ((&currentThread) ? exWire.isLUI : exStage[2'h3].isLUI),
          isAUIPC: ((&currentThread) ? exWire.isAUIPC : exStage[2'h3].isAUIPC),
          isFence: ((&currentThread) ? exWire.isFence : exStage[2'h3].isFence),
          isSystem: ((&currentThread) ? exWire.isSystem : exStage[2'h3].isSystem),
          aluOp: ((&currentThread) ? exWire.aluOp : exStage[2'h3].aluOp),
          imm: ((&currentThread) ? exWire.imm : exStage[2'h3].imm),
          rs1: ((&currentThread) ? exWire.rs1 : exStage[2'h3].rs1),
          rs2: ((&currentThread) ? exWire.rs2 : exStage[2'h3].rs2),
          rd: ((&currentThread) ? exWire.rd : exStage[2'h3].rd),
          rs1Data: ((&currentThread) ? exWire.rs1Data : exStage[2'h3].rs1Data),
          rs2Data: ((&currentThread) ? exWire.rs2Data : exStage[2'h3].rs2Data),
          memAddr: ((&currentThread) ? exWire.memAddr : exStage[2'h3].memAddr),
          memWdata: ((&currentThread) ? exWire.memWdata : exStage[2'h3].memWdata),
          memRdata: ((&currentThread) ? exWire.memRdata : exStage[2'h3].memRdata),
          aluResult: ((&currentThread) ? exWire.aluResult : exStage[2'h3].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :84:25, :99:25, :102:26, :139:27, :147:24, :151:13, :152:13, :153:13, :158:22, :159:39, :164:26, :191:27
      memStage[2'h0] <=
        '{threadId: (_GEN_4 ? memWire.threadId : memStage[2'h0].threadId),
          valid: (_GEN_4 ? memWire.valid : memStage[2'h0].valid),
          pc: (_GEN_4 ? memWire.pc : memStage[2'h0].pc),
          instr: (_GEN_4 ? memWire.instr : memStage[2'h0].instr),
          isALU: (_GEN_4 ? memWire.isALU : memStage[2'h0].isALU),
          isLoad: (_GEN_4 ? memWire.isLoad : memStage[2'h0].isLoad),
          isStore: (_GEN_4 ? memWire.isStore : memStage[2'h0].isStore),
          isBranch: (_GEN_4 ? memWire.isBranch : memStage[2'h0].isBranch),
          isJAL: (_GEN_4 ? memWire.isJAL : memStage[2'h0].isJAL),
          isJALR: (_GEN_4 ? memWire.isJALR : memStage[2'h0].isJALR),
          isLUI: (_GEN_4 ? memWire.isLUI : memStage[2'h0].isLUI),
          isAUIPC: (_GEN_4 ? memWire.isAUIPC : memStage[2'h0].isAUIPC),
          isFence: (_GEN_4 ? memWire.isFence : memStage[2'h0].isFence),
          isSystem: (_GEN_4 ? memWire.isSystem : memStage[2'h0].isSystem),
          aluOp: (_GEN_4 ? memWire.aluOp : memStage[2'h0].aluOp),
          imm: (_GEN_4 ? memWire.imm : memStage[2'h0].imm),
          rs1: (_GEN_4 ? memWire.rs1 : memStage[2'h0].rs1),
          rs2: (_GEN_4 ? memWire.rs2 : memStage[2'h0].rs2),
          rd: (_GEN_4 ? memWire.rd : memStage[2'h0].rd),
          rs1Data: (_GEN_4 ? memWire.rs1Data : memStage[2'h0].rs1Data),
          rs2Data: (_GEN_4 ? memWire.rs2Data : memStage[2'h0].rs2Data),
          memAddr: (_GEN_4 ? memWire.memAddr : memStage[2'h0].memAddr),
          memWdata: (_GEN_4 ? memWire.memWdata : memStage[2'h0].memWdata),
          memRdata: (_GEN_4 ? memWire.memRdata : memStage[2'h0].memRdata),
          aluResult: (_GEN_4 ? memWire.aluResult : memStage[2'h0].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:25, :99:25, :102:26, :139:27, :164:26, :172:25, :176:15, :177:15, :178:34, :181:20, :184:19, :185:23, :188:42, :191:27
      memStage[2'h1] <=
        '{threadId: (_GEN_5 ? memWire.threadId : memStage[2'h1].threadId),
          valid: (_GEN_5 ? memWire.valid : memStage[2'h1].valid),
          pc: (_GEN_5 ? memWire.pc : memStage[2'h1].pc),
          instr: (_GEN_5 ? memWire.instr : memStage[2'h1].instr),
          isALU: (_GEN_5 ? memWire.isALU : memStage[2'h1].isALU),
          isLoad: (_GEN_5 ? memWire.isLoad : memStage[2'h1].isLoad),
          isStore: (_GEN_5 ? memWire.isStore : memStage[2'h1].isStore),
          isBranch: (_GEN_5 ? memWire.isBranch : memStage[2'h1].isBranch),
          isJAL: (_GEN_5 ? memWire.isJAL : memStage[2'h1].isJAL),
          isJALR: (_GEN_5 ? memWire.isJALR : memStage[2'h1].isJALR),
          isLUI: (_GEN_5 ? memWire.isLUI : memStage[2'h1].isLUI),
          isAUIPC: (_GEN_5 ? memWire.isAUIPC : memStage[2'h1].isAUIPC),
          isFence: (_GEN_5 ? memWire.isFence : memStage[2'h1].isFence),
          isSystem: (_GEN_5 ? memWire.isSystem : memStage[2'h1].isSystem),
          aluOp: (_GEN_5 ? memWire.aluOp : memStage[2'h1].aluOp),
          imm: (_GEN_5 ? memWire.imm : memStage[2'h1].imm),
          rs1: (_GEN_5 ? memWire.rs1 : memStage[2'h1].rs1),
          rs2: (_GEN_5 ? memWire.rs2 : memStage[2'h1].rs2),
          rd: (_GEN_5 ? memWire.rd : memStage[2'h1].rd),
          rs1Data: (_GEN_5 ? memWire.rs1Data : memStage[2'h1].rs1Data),
          rs2Data: (_GEN_5 ? memWire.rs2Data : memStage[2'h1].rs2Data),
          memAddr: (_GEN_5 ? memWire.memAddr : memStage[2'h1].memAddr),
          memWdata: (_GEN_5 ? memWire.memWdata : memStage[2'h1].memWdata),
          memRdata: (_GEN_5 ? memWire.memRdata : memStage[2'h1].memRdata),
          aluResult: (_GEN_5 ? memWire.aluResult : memStage[2'h1].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:25, :99:25, :102:26, :139:27, :164:26, :172:25, :176:15, :177:15, :178:34, :181:20, :184:19, :185:23, :188:42, :191:27
      memStage[2'h2] <=
        '{threadId: (_GEN_6 ? memWire.threadId : memStage[2'h2].threadId),
          valid: (_GEN_6 ? memWire.valid : memStage[2'h2].valid),
          pc: (_GEN_6 ? memWire.pc : memStage[2'h2].pc),
          instr: (_GEN_6 ? memWire.instr : memStage[2'h2].instr),
          isALU: (_GEN_6 ? memWire.isALU : memStage[2'h2].isALU),
          isLoad: (_GEN_6 ? memWire.isLoad : memStage[2'h2].isLoad),
          isStore: (_GEN_6 ? memWire.isStore : memStage[2'h2].isStore),
          isBranch: (_GEN_6 ? memWire.isBranch : memStage[2'h2].isBranch),
          isJAL: (_GEN_6 ? memWire.isJAL : memStage[2'h2].isJAL),
          isJALR: (_GEN_6 ? memWire.isJALR : memStage[2'h2].isJALR),
          isLUI: (_GEN_6 ? memWire.isLUI : memStage[2'h2].isLUI),
          isAUIPC: (_GEN_6 ? memWire.isAUIPC : memStage[2'h2].isAUIPC),
          isFence: (_GEN_6 ? memWire.isFence : memStage[2'h2].isFence),
          isSystem: (_GEN_6 ? memWire.isSystem : memStage[2'h2].isSystem),
          aluOp: (_GEN_6 ? memWire.aluOp : memStage[2'h2].aluOp),
          imm: (_GEN_6 ? memWire.imm : memStage[2'h2].imm),
          rs1: (_GEN_6 ? memWire.rs1 : memStage[2'h2].rs1),
          rs2: (_GEN_6 ? memWire.rs2 : memStage[2'h2].rs2),
          rd: (_GEN_6 ? memWire.rd : memStage[2'h2].rd),
          rs1Data: (_GEN_6 ? memWire.rs1Data : memStage[2'h2].rs1Data),
          rs2Data: (_GEN_6 ? memWire.rs2Data : memStage[2'h2].rs2Data),
          memAddr: (_GEN_6 ? memWire.memAddr : memStage[2'h2].memAddr),
          memWdata: (_GEN_6 ? memWire.memWdata : memStage[2'h2].memWdata),
          memRdata: (_GEN_6 ? memWire.memRdata : memStage[2'h2].memRdata),
          aluResult: (_GEN_6 ? memWire.aluResult : memStage[2'h2].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:85:25, :99:25, :102:26, :139:27, :164:26, :172:25, :176:15, :177:15, :178:34, :181:20, :184:19, :185:23, :188:42, :191:27
      memStage[2'h3] <=
        '{threadId: ((&currentThread) ? memWire.threadId : memStage[2'h3].threadId),
          valid: ((&currentThread) ? memWire.valid : memStage[2'h3].valid),
          pc: ((&currentThread) ? memWire.pc : memStage[2'h3].pc),
          instr: ((&currentThread) ? memWire.instr : memStage[2'h3].instr),
          isALU: ((&currentThread) ? memWire.isALU : memStage[2'h3].isALU),
          isLoad: ((&currentThread) ? memWire.isLoad : memStage[2'h3].isLoad),
          isStore: ((&currentThread) ? memWire.isStore : memStage[2'h3].isStore),
          isBranch: ((&currentThread) ? memWire.isBranch : memStage[2'h3].isBranch),
          isJAL: ((&currentThread) ? memWire.isJAL : memStage[2'h3].isJAL),
          isJALR: ((&currentThread) ? memWire.isJALR : memStage[2'h3].isJALR),
          isLUI: ((&currentThread) ? memWire.isLUI : memStage[2'h3].isLUI),
          isAUIPC: ((&currentThread) ? memWire.isAUIPC : memStage[2'h3].isAUIPC),
          isFence: ((&currentThread) ? memWire.isFence : memStage[2'h3].isFence),
          isSystem: ((&currentThread) ? memWire.isSystem : memStage[2'h3].isSystem),
          aluOp: ((&currentThread) ? memWire.aluOp : memStage[2'h3].aluOp),
          imm: ((&currentThread) ? memWire.imm : memStage[2'h3].imm),
          rs1: ((&currentThread) ? memWire.rs1 : memStage[2'h3].rs1),
          rs2: ((&currentThread) ? memWire.rs2 : memStage[2'h3].rs2),
          rd: ((&currentThread) ? memWire.rd : memStage[2'h3].rd),
          rs1Data: ((&currentThread) ? memWire.rs1Data : memStage[2'h3].rs1Data),
          rs2Data: ((&currentThread) ? memWire.rs2Data : memStage[2'h3].rs2Data),
          memAddr: ((&currentThread) ? memWire.memAddr : memStage[2'h3].memAddr),
          memWdata: ((&currentThread) ? memWire.memWdata : memStage[2'h3].memWdata),
          memRdata: ((&currentThread) ? memWire.memRdata : memStage[2'h3].memRdata),
          aluResult: ((&currentThread) ? memWire.aluResult : memStage[2'h3].aluResult)};	// src/main/scala/TetraNyteCore/PipelineRegs.scala:56:26, src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30, :85:25, :99:25, :102:26, :139:27, :164:26, :172:25, :176:15, :177:15, :178:34, :181:20, :184:19, :185:23, :188:42, :191:27
    end
  end // always @(posedge)
  instrMem_1024x32 instrMem_ext (	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
    .R0_addr (_ifWire_instr_T_1),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:95:35
    .R0_en   (1'h1),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
    .R0_clk  (clock),
    .R0_data (_instrMem_ext_R0_data),
    .W0_addr (io.instrWriteAddr),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
    .W0_en   (io.instrWriteEnable),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
    .W0_clk  (clock),
    .W0_data (io.instrWriteData)	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  );	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:50:29
  RegFileMT2R1WVec regFile (	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:56:23
    .clock       (clock),
    .reset       (reset),
    .io_threadID (currentThread),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:43:30
    .io_src1     (decWire.rs1),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :123:15
    .io_src2     (decWire.rs2),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:110:25, :124:15
    .io_dst1     (memWire.rd),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:172:25, :185:23
    .io_wen      (_regFile_io_wen_T_3),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:187:64
    .io_dst1data (wbData),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:184:19
    .io_src1data (_regFile_io_src1data),
    .io_src2data (_regFile_io_src2data)
  );	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:56:23
  TetraNyteCore_Anon alu (	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:19
    .io_a   (exWire.rs1Data),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:24, :151:13
    .io_b   (exWire.rs2Data),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:24, :152:13
    .io_fn  (exWire.aluOp),	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:147:24, :153:13
    .io_out (_alu_io_out)
  );	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:65:19
  assign io_memAddr = io.memAddr;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  assign io_memWdata = io.memWdata;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
  assign io_memWe = io.memWe;	// src/main/scala/TetraNyteCore/TetraNyteCore.scala:21:7
endmodule

